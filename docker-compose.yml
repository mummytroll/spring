version: '2'
services:

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}

services:
  demo_m:
    build: demo_m
    container_name: demo_m
    expose:
      - 8081
    ports:
    - "8081:8081"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    ports:
      - "9100:9100"
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - monitoring
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
#    environment:
#      - GF_SECURITY_ADMIN_PASSWORD=pass
    depends_on:
      - prometheus
    networks:
      - monitoring
    ports:
      - "3000:3000"

# образ исталлятор дашборда и источника данных
# Dockerfile дает старт скрипту который после старта порта графаны, пуляет туда необходимые запросы

  after_install:
    build: ./after_install
    container_name: after_install
    image: prom/after_install:latest
    depends_on:
      - grafana
    restart: "no"
    networks:
      - monitoring